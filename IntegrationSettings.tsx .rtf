{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // src/components/settings/IntegrationSettings.tsx\
\
import React, \{ useState \} from 'react';\
import \{ useAuth \} from '../../hooks/useAuth';\
import \{ LoadingSpinner \} from '../shared/LoadingSpinner';\
import \{ CheckCircleIcon, XCircleIcon, CogIcon \} from '@heroicons/react/outline';\
\
interface Integration \{\
  id: string;\
  name: string;\
  description: string;\
  icon: string;\
  status: 'connected' | 'disconnected';\
  category: 'payment' | 'communication' | 'calendar' | 'accounting';\
  config?: any;\
\}\
\
export const IntegrationSettings: React.FC = () => \{\
  const \{ serviceProvider \} = useAuth();\
  const [isLoading, setIsLoading] = useState(false);\
  const [isSaving, setIsSaving] = useState(false);\
  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);\
  \
  const [integrations, setIntegrations] = useState<Integration[]>([\
    \{\
      id: 'stripe',\
      name: 'Stripe',\
      description: 'Payment processing for invoices',\
      icon: '\uc0\u55357 \u56499 ',\
      status: 'disconnected',\
      category: 'payment'\
    \},\
    \{\
      id: 'quickbooks',\
      name: 'QuickBooks',\
      description: 'Accounting and financial management',\
      icon: '\uc0\u55357 \u56522 ',\
      status: 'disconnected',\
      category: 'accounting'\
    \},\
    \{\
      id: 'twilio',\
      name: 'Twilio',\
      description: 'SMS notifications for customers',\
      icon: '\uc0\u55357 \u56561 ',\
      status: 'disconnected',\
      category: 'communication'\
    \},\
    \{\
      id: 'google-calendar',\
      name: 'Google Calendar',\
      description: 'Sync service appointments',\
      icon: '\uc0\u55357 \u56517 ',\
      status: 'connected',\
      category: 'calendar'\
    \},\
    \{\
      id: 'sendgrid',\
      name: 'SendGrid',\
      description: 'Email notifications and campaigns',\
      icon: '\uc0\u9993 \u65039 ',\
      status: 'disconnected',\
      category: 'communication'\
    \}\
  ]);\
\
  const handleConnect = async (integrationId: string) => \{\
    setIsLoading(true);\
    try \{\
      // Simulate API call\
      await new Promise(resolve => setTimeout(resolve, 2000));\
      \
      setIntegrations(integrations.map(integration => \
        integration.id === integrationId \
          ? \{ ...integration, status: 'connected' \}\
          : integration\
      ));\
    \} catch (error) \{\
      console.error('Error connecting integration:', error);\
    \} finally \{\
      setIsLoading(false);\
    \}\
  \};\
\
  const handleDisconnect = async (integrationId: string) => \{\
    setIsLoading(true);\
    try \{\
      // Simulate API call\
      await new Promise(resolve => setTimeout(resolve, 1000));\
      \
      setIntegrations(integrations.map(integration => \
        integration.id === integrationId \
          ? \{ ...integration, status: 'disconnected' \}\
          : integration\
      ));\
    \} catch (error) \{\
      console.error('Error disconnecting integration:', error);\
    \} finally \{\
      setIsLoading(false);\
    \}\
  \};\
\
  const handleConfigure = (integration: Integration) => \{\
    setSelectedIntegration(integration);\
  \};\
\
  const integrationsByCategory = integrations.reduce((acc, integration) => \{\
    if (!acc[integration.category]) \{\
      acc[integration.category] = [];\
    \}\
    acc[integration.category].push(integration);\
    return acc;\
  \}, \{\} as Record<string, Integration[]>);\
\
  const categoryLabels = \{\
    payment: 'Payment Processing',\
    communication: 'Communication',\
    calendar: 'Calendar & Scheduling',\
    accounting: 'Accounting'\
  \};\
\
  return (\
    <div>\
      <div className="mb-8">\
        <h2 className="text-2xl font-semibold text-gray-900">Third-Party Integrations</h2>\
        <p className="mt-1 text-sm text-gray-600">\
          Connect your favorite tools and services\
        </p>\
      </div>\
\
      \{Object.entries(integrationsByCategory).map(([category, categoryIntegrations]) => (\
        <div key=\{category\} className="mb-8">\
          <h3 className="text-lg font-medium text-gray-900 mb-4">\
            \{categoryLabels[category as keyof typeof categoryLabels]\}\
          </h3>\
          \
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">\
            \{categoryIntegrations.map((integration) => (\
              <div\
                key=\{integration.id\}\
                className="relative rounded-lg border border-gray-300 bg-white px-6 py-5 shadow-sm hover:border-gray-400"\
              >\
                <div className="flex items-center justify-between">\
                  <div className="flex items-center">\
                    <span className="text-2xl mr-3">\{integration.icon\}</span>\
                    <div>\
                      <h4 className="text-sm font-medium text-gray-900">\
                        \{integration.name\}\
                      </h4>\
                      <p className="text-sm text-gray-500">\
                        \{integration.description\}\
                      </p>\
                    </div>\
                  </div>\
                  <div className="ml-4">\
                    \{integration.status === 'connected' ? (\
                      <CheckCircleIcon className="h-6 w-6 text-green-500" />\
                    ) : (\
                      <XCircleIcon className="h-6 w-6 text-gray-400" />\
                    )\}\
                  </div>\
                </div>\
                \
                <div className="mt-4 flex items-center space-x-3">\
                  \{integration.status === 'connected' ? (\
                    <>\
                      <button\
                        onClick=\{() => handleConfigure(integration)\}\
                        className="text-sm text-gray-700 hover:text-gray-900"\
                      >\
                        <CogIcon className="h-5 w-5 inline mr-1" />\
                        Configure\
                      </button>\
                      <button\
                        onClick=\{() => handleDisconnect(integration.id)\}\
                        disabled=\{isLoading\}\
                        className="text-sm text-red-600 hover:text-red-800"\
                      >\
                        Disconnect\
                      </button>\
                    </>\
                  ) : (\
                    <button\
                      onClick=\{() => handleConnect(integration.id)\}\
                      disabled=\{isLoading\}\
                      className="text-sm text-blue-600 hover:text-blue-800"\
                    >\
                      Connect\
                    </button>\
                  )\}\
                </div>\
              </div>\
            ))\}\
          </div>\
        </div>\
      ))\}\
\
      \{/* Configuration Modal */\}\
      \{selectedIntegration && (\
        <div className="fixed z-10 inset-0 overflow-y-auto">\
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">\
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">\
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>\
            </div>\
            \
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">\
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">\
                <h3 className="text-lg leading-6 font-medium text-gray-900">\
                  Configure \{selectedIntegration.name\}\
                </h3>\
                <div className="mt-4">\
                  <p className="text-sm text-gray-500">\
                    Configuration options for \{selectedIntegration.name\} will appear here.\
                  </p>\
                  \{/* Add specific configuration fields based on integration type */\}\
                </div>\
              </div>\
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">\
                <button\
                  type="button"\
                  onClick=\{async () => \{\
                    setIsSaving(true);\
                    await new Promise(resolve => setTimeout(resolve, 1000));\
                    setIsSaving(false);\
                    setSelectedIntegration(null);\
                  \}\}\
                  disabled=\{isSaving\}\
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50"\
                >\
                  \{isSaving ? <LoadingSpinner /> : 'Save Configuration'\}\
                </button>\
                <button\
                  type="button"\
                  onClick=\{() => setSelectedIntegration(null)\}\
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"\
                >\
                  Cancel\
                </button>\
              </div>\
            </div>\
          </div>\
        </div>\
      )\}\
    </div>\
  );\
\};}