{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // src/components/settings/NotificationSettings.tsx\
\
import React, \{ useState \} from 'react';\
import \{ useAuth \} from '../../hooks/useAuth';\
import \{ LoadingSpinner \} from '../shared/LoadingSpinner';\
import \{ Switch \} from '@headlessui/react';\
\
export const NotificationSettings: React.FC = () => \{\
  const \{ serviceProvider \} = useAuth();\
  const [isSaving, setIsSaving] = useState(false);\
  const [successMessage, setSuccessMessage] = useState('');\
  \
  const [notificationSettings, setNotificationSettings] = useState(\{\
    email: \{\
      newRequests: serviceProvider?.settings?.notifications?.newRequests ?? true,\
      requestUpdates: true,\
      chatMessages: serviceProvider?.settings?.notifications?.chatMessages ?? true,\
      maintenanceDue: serviceProvider?.settings?.notifications?.maintenanceDue ?? true,\
      emergencies: serviceProvider?.settings?.notifications?.emergencies ?? true,\
      invoices: true,\
      weeklyReport: false,\
      marketing: false\
    \},\
    push: \{\
      newRequests: true,\
      requestUpdates: true,\
      chatMessages: true,\
      maintenanceDue: false,\
      emergencies: true\
    \},\
    sms: \{\
      emergencies: serviceProvider?.settings?.notifications?.emergencies ?? true,\
      newRequests: false,\
      requestUpdates: false\
    \}\
  \});\
\
  const handleSubmit = async (e: React.FormEvent) => \{\
    e.preventDefault();\
    setIsSaving(true);\
    setSuccessMessage('');\
    \
    try \{\
      // Save notification settings\
      console.log('Saving notification settings:', notificationSettings);\
      await new Promise(resolve => setTimeout(resolve, 1500));\
      setSuccessMessage('Notification settings updated successfully!');\
    \} catch (error) \{\
      console.error('Error saving settings:', error);\
    \} finally \{\
      setIsSaving(false);\
    \}\
  \};\
\
  const updateSetting = (channel: string, setting: string, value: boolean) => \{\
    setNotificationSettings(prev => (\{\
      ...prev,\
      [channel]: \{\
        ...prev[channel as keyof typeof prev],\
        [setting]: value\
      \}\
    \}));\
  \};\
\
  return (\
    <div>\
      <div className="mb-8">\
        <h2 className="text-2xl font-semibold text-gray-900">Notification Preferences</h2>\
        <p className="mt-1 text-sm text-gray-600">\
          Choose how you want to be notified about important events\
        </p>\
      </div>\
\
      \{successMessage && (\
        <div className="mb-4 rounded-md bg-green-50 p-4">\
          <p className="text-sm text-green-800">\{successMessage\}</p>\
        </div>\
      )\}\
\
      <form onSubmit=\{handleSubmit\} className="space-y-8">\
        \{/* Email Notifications */\}\
        <div>\
          <h3 className="text-lg font-medium text-gray-900 mb-4">Email Notifications</h3>\
          <div className="space-y-4">\
            \{Object.entries(notificationSettings.email).map(([key, value]) => (\
              <div key=\{key\} className="flex items-center justify-between">\
                <label htmlFor=\{`email-$\{key\}`\} className="text-sm font-medium text-gray-700">\
                  \{key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')\}\
                </label>\
                <Switch\
                  checked=\{value\}\
                  onChange=\{(checked) => updateSetting('email', key, checked)\}\
                  className=\{`$\{\
                    value ? 'bg-blue-600' : 'bg-gray-200'\
                  \} relative inline-flex h-6 w-11 items-center rounded-full`\}\
                >\
                  <span className="sr-only">Enable \{key\}</span>\
                  <span\
                    className=\{`$\{\
                      value ? 'translate-x-6' : 'translate-x-1'\
                    \} inline-block h-4 w-4 transform rounded-full bg-white transition`\}\
                  />\
                </Switch>\
              </div>\
            ))\}\
          </div>\
        </div>\
\
        \{/* Push Notifications */\}\
        <div>\
          <h3 className="text-lg font-medium text-gray-900 mb-4">Push Notifications</h3>\
          <div className="space-y-4">\
            \{Object.entries(notificationSettings.push).map(([key, value]) => (\
              <div key=\{key\} className="flex items-center justify-between">\
                <label htmlFor=\{`push-$\{key\}`\} className="text-sm font-medium text-gray-700">\
                  \{key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')\}\
                </label>\
                <Switch\
                  checked=\{value\}\
                  onChange=\{(checked) => updateSetting('push', key, checked)\}\
                  className=\{`$\{\
                    value ? 'bg-blue-600' : 'bg-gray-200'\
                  \} relative inline-flex h-6 w-11 items-center rounded-full`\}\
                >\
                  <span className="sr-only">Enable \{key\}</span>\
                  <span\
                    className=\{`$\{\
                      value ? 'translate-x-6' : 'translate-x-1'\
                    \} inline-block h-4 w-4 transform rounded-full bg-white transition`\}\
                  />\
                </Switch>\
              </div>\
            ))\}\
          </div>\
        </div>\
\
        \{/* SMS Notifications */\}\
        <div>\
          <h3 className="text-lg font-medium text-gray-900 mb-4">SMS Notifications</h3>\
          <p className="text-sm text-gray-500 mb-4">\
            SMS notifications may incur additional charges\
          </p>\
          <div className="space-y-4">\
            \{Object.entries(notificationSettings.sms).map(([key, value]) => (\
              <div key=\{key\} className="flex items-center justify-between">\
                <label htmlFor=\{`sms-$\{key\}`\} className="text-sm font-medium text-gray-700">\
                  \{key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')\}\
                </label>\
                <Switch\
                  checked=\{value\}\
                  onChange=\{(checked) => updateSetting('sms', key, checked)\}\
                  className=\{`$\{\
                    value ? 'bg-blue-600' : 'bg-gray-200'\
                  \} relative inline-flex h-6 w-11 items-center rounded-full`\}\
                >\
                  <span className="sr-only">Enable \{key\}</span>\
                  <span\
                    className=\{`$\{\
                      value ? 'translate-x-6' : 'translate-x-1'\
                    \} inline-block h-4 w-4 transform rounded-full bg-white transition`\}\
                  />\
                </Switch>\
              </div>\
            ))\}\
          </div>\
        </div>\
\
        \{/* Quiet Hours */\}\
        <div>\
          <h3 className="text-lg font-medium text-gray-900 mb-4">Quiet Hours</h3>\
          <p className="text-sm text-gray-500 mb-4">\
            Pause non-emergency notifications during specific hours\
          </p>\
          <div className="flex items-center space-x-4">\
            <div>\
              <label htmlFor="quiet-start" className="block text-sm font-medium text-gray-700">\
                Start Time\
              </label>\
              <input\
                type="time"\
                id="quiet-start"\
                defaultValue="22:00"\
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"\
              />\
            </div>\
            <div>\
              <label htmlFor="quiet-end" className="block text-sm font-medium text-gray-700">\
                End Time\
              </label>\
              <input\
                type="time"\
                id="quiet-end"\
                defaultValue="07:00"\
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"\
              />\
            </div>\
          </div>\
        </div>\
\
        <div className="flex justify-end">\
          <button\
            type="submit"\
            disabled=\{isSaving\}\
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"\
          >\
            \{isSaving ? <LoadingSpinner /> : 'Save Preferences'\}\
          </button>\
        </div>\
      </form>\
    </div>\
  );\
\};}